@startuml
'https://plantuml.com/class-diagram

class Main
{
    + main(String[] args)
}

package model
{
    class Partie implements observers.ObserverJoueur
    {
        - tour : Integer

        + <<create>> Partie()
        + addObserver(observeur : observers.ObserverPartie)
        + lancerPartie()
        - tourDeJeu()
        + tourneTuile()
        + deplacementJoueur(dir : Direction)
        + updatePosition(x : Integer, y : Integer)
        + updateTresorSuivant(tresor : Tresor, tRestans : Integer)
        + updateVictoire(nom : String)
        + toString() : String

        - notifyRotation()
        - notifyPositions()
    }

    class FacadeGeneration
    {
        - {static} m_tuileRabStockee
        + {static} creationJoueurs() : Joueur[]
        + {static} genererTuiles(joueurs : Joueur[]) : Tuile[][]
        - {static} genererTuilesFixes(joueurs : Joueur[], tresors : ArrayList<Tresor>) : ArrayList:Tuile
        - {static} genererTuilesAmovibles(tresors : ArrayList<Tresor>) : ArrayList:Tuile
        - {static} genererTableauTuiles(fixes : ArrayList<Tuile>, amovibles : ArrayList<Tuile>) : Tuile[][]
        - {static} colonneAmovible(amovibles : ArrayList<Tresor) : Tuile[]
        - {static} colonneFixe(fixes : ArrayList<Tresor>) : Tuile[]
        + {static} getTuileRab() : Tuile
    }

    class Plateau
    {
        + <<create>> Plateau()
        + addObserver(observeur : ObserverPlateau)
        + placementTuile(tuile : Tuile, dir : Direction, ligne : Integer) : Tuile
        + deplacementPossible(x : Integer, y : Integer, dir : Direction) : Boolean
        + finTour(joueur : Joueur)
        + getAllJoueurs() : Joueur[]
        + getJoueurSuivant(precedent : Joueur) : Joueur
        + getPositionsJoueurs() : Integer[][]
        - creationJoueurs()
        - repatitionTresors(tresors : Tresor[], numJ : Integer) : Tresor[]
        + toString() : String

        - notifyDisposition(dir : Direction, ligne : Integer)
        - notifyRecupTresor()
    }

    enum Direction
    {
        NORD
        EST
        SUD
        OUEST

        + getOpposite() : Direction
        + getNext() : Direction
        + {static} getRandom() : Direction
    }

    package tuiles
    {
        class TuileFactory
        {
            + {static} makeTuileDefault(dir : Direction, mode : Integer) : TuileDefault
            + {static} makeTuileTresor(dir : Direction, mode : Integer, tresor : Tresor) : TuileTresor
            + {static} makeTuileBase(dir : Direction, mode : Integer, joueur : Joueur) : TuileBase
            - {static} getDirections(dir : Direction, mode : Integet) : Direction[]
        }

        abstract class Tuile
        {
            - m_nord : Boolean
            - m_est : Boolean
            - m_sud : Boolean
            - m_ouest : Boolean

            # <<create>> Tuile(ouvertures : Direction[])
            + deplacementEstValide(dest : Tuile, dir : Direction) : Boolean
            + rotation()
            - estOuvert(dir : Directions) : Boolean
            + {abstract} action(joueur : Joueur)
            + toString() : String
        }

        class TuileDefault extends Tuile
        {
            + <<create>> TuileDefault(ouvertures : Direction[])
            + action(joueur : Joueur)
            + toString() : String
        }
        /'
        TuileDefault ..> Direction : <<uses>>
        TuileDefault ..> Joueur : <<uses>>'/

        class TuileDepart extends Tuile
        {
            + <<create>> TuileDepart(ouvertures : Direction[], joueur : Joueur)
            + action(joueur : Joueur)
            + toString() : String
        }
        /'
        TuileDepart ..> Direction : <<uses>>
        TuileDepart ..> Joueur : <<uses>> '/

        class TuileTresor extends Tuile
        {
            + <<create>> TuileTresor(ouvertures : Direction[], tresor : Tresor)
            + action(joueur : Joueur)
            + toString() : String
        }
        /'
        TuileTresor ..> Direction : <<uses>>
        TuileTresor ..> Joueur : <<uses>>
        TuileTresor ..> Tresor : <<uses>>'/
    }

    class Joueur
    {
        - m_nom : String
        - m_couleur : Color
        - m_x : Integer
        - m_y : Integer
        - m_avancementObj : Integer

        + <<create>> Joueur(nom : String, couleur : Color, x : Integer, y : Integer, objectifs : Tresor[])
        + addObserver(observeur : ObserverJoueur)
        + getPosition() : Integer[]
        + getObjectif() : Tresor
        + deplacement(dir : Direction)
        + validerObjectif(tresor : Tresor)
        + caseDepart()
        - aFini() : Boolean
        + toString() : String

        - notifyPosition()
        - notifyTresorSuivant()
        - notifyVictoire()
    }

    enum Tresor
    {
        COFFRE
        CHOUETTE
        FANTOME
        BAGUE
        CHANDELIER
        LEZARD
        EPEE
        CAUVE_SOURIS
        RAT
        CARTE
        PRINCESSE
        DRAGON
        CRANE
        CLES
        GNOME
        COURONNE
        SCARABE
        SAC
        LIVRE
        COLLIER
        ARRAIGNEE
        DIAMANT
        ARMURE
        PAPILLON

        - <<create>> Tresor(nom : String)
        - m_nom
        + getNom() : String
        + getRandomTreasureList() : ArrayList<Tresor>
    }

    package observers
    {
        interface ObserverJoueur
        {
            + {abstract} updatePosition(x : Integer, y : Integer)
            + {abstract} updateTresorSuivant(tresor : Tresor, tRestans : Integer)
            + {abstract} updateVictoire(nom : String)
        }

        interface ObserverPlateau
        {
            + {abstract} updateDisposition(tuiles : Tuile[])
            + {abstract} updateRecupTresor(x : Integer, y : Integer)
        }

        interface ObserverPartie
        {
            + {abstract} updateRotation()
            + {abstract} updatePositions()
        }
    }
}

package view
{
    class AffichagePartie implements observers.ObserverPartie, observers.ObserverPlateau
    {

    }
}

package controller
{
    class Controller
    {

    }
}

Main ..> Partie : <<uses>>
Main ..> Controller : <<uses>>
Main ..> AffichagePartie : <<uses>>
Joueur ..> Direction : <<uses>>
'Joueur ..> Tresor : <<uses>>
Tuile ..> Direction : <<uses>>
Tuile ..> Joueur : <<uses>>
TuileFactory ..> TuileDefault : <<uses>>
TuileFactory ..> TuileTresor : <<uses>>
TuileFactory ..> TuileDepart : <<uses>>
TuileFactory ..> Direction : <<uses>>
Plateau ..> Direction : <<uses>>
Plateau ..> TuileFactory : <<uses>>
Partie ..> Direction : <<uses>>
Partie ..> FacadeGeneration : <<uses>>

Partie "1" *---> "1\n - m_plateau" Plateau : possède
Partie "1" *---> "1\n - m_tuileRab" Tuile : a en réserve
Partie "1" o---> "1\n - m_joueurEnCours" Joueur : au tour de
Partie "1" o---> "*\n - m_observeurs" ObserverPartie : est observé par

FacadeGeneration "1" o---> "1\n - {static} m_tuileRabStockee" Tuile : Garde de côté

Plateau "1" o---> "49\n - m_tuiles" Tuile : est composé de
Plateau "1" *---> "4\n - m_joueurs" Joueur : est parcouru par
Plateau "1" o---> "*\n - m_observeurs" ObserverPlateau : est observé par

TuileTresor "1" *---> "1\n - m_tresor" Tresor : possede
TuileDepart "1" o---> "1\n - m_joueur" Joueur : Spawn sur

Joueur "1" *---> "0..6\n - m_objectifs" Tresor : doit atteindre
Joueur "1" o---> "*\n - m_observeurs" ObserverJoueur : est observé par

@enduml