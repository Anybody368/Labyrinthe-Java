+@startuml
'https://plantuml.com/class-diagram

class Main
{
    + main(String[] args)
}

package model
{
    class Game
    {
        - tour : Integer

        + addObserver(observer : GameObserver)
        + addBoardObserver(observer : BoardObserver)
        + addPlayersObserver(observer : PlayerObserver)
        + startGame()
        + turnTile()
        + movePLayer(dir : Direction)
        + endTurn()
        + toString() : String

        - notifyTile()
        - notifyTurn()
    }

    class TilesGenerationHelper
    {
        + {static} generateFixedTiles(players : Player[], tresors : Treasure[24]) : Tile[16]
        + {static} generateMovableTiles(tresors : Tresor[12]) : Tile[34]
        + {static} generateTilesTable(fixes : Tile[16], amovibles : Tile[34]) : Tile[49]
        - {static} movableColumn(amovibles : Tile[*]) : Tile[7]
        - {static} fixedColumn(fixes : Tile[*]) : Tile[7]
    }

    class Board
    {
        + <<create>> Board(tiles : Tiles[49], players : Player[4])
        + addObserver(observer : BoardObserver)
        + addPlayersObserver(observer : PlayerObserver)
        + placeTile(tile : Tile, dir : Direction, index : Integer) : Tile
        + moveIsPossible(x : Integer, y : Integer, dir : Direction) : Boolean
        + endTurn(player : Player)
        + getAllPlayers() : Player[4]
        + getNextPlayer(previous : Player) : Player
        + getPlayersPositions() : Integer[49]
        + toString() : String

        - notifyTilesArrangement(dir : Direction, ligne : Integer)
    }

    enum Direction
    {
        NORTH
        EAST
        SOUTH
        WEST

        + getOpposite() : Direction
        + getNext() : Direction
        + {static} getRandom() : Direction
    }

    package tiles
    {
        class TileFactory
        {
            + {static} makeTileDefault(dir : Direction, shape : Shape) : TileDefault
            + {static} makeTileTreasure(dir : Direction, shape : Shape, treasure : Treasure) : TileTreasure
            + {static} makeTileBase(dir : Direction, shape : Shape, player : Player) : TileBase
        }

        enum Shape
        {
            I
            L
            T
        }

        abstract class Tile
        {
            # <<create>> Tile(shape : Shape, dir : Direction)
            + IsPlayerMoveValid(dest : Tile, dir : Direction) : Boolean
            + rotation()
            - isOpen(dir : Directions) : Boolean
            + {abstract} action(player : Player)
            + toString() : String
        }

        class TileDefault extends Tile
        {
            + <<create>> TileDefault(shape : Shape, dir : Direction)
            + action(player : Player)
            + toString() : String
        }

        class TileBase extends Tile
        {
            + <<create>> TileBase(shape : Shape, dir : Direction, player : Player)
            + action(player : Player)
            + toString() : String
        }

        class TileTreasure extends Tile
        {
            + <<create>> TileTreasure(shape : Shape, dir : Direction, treasure : Treasure)
            + action(player : Player)
            + toString() : String
        }
    }

    class Player
    {
        - m_name : String
        - m_colour : Color
        - m_x : Integer
        - m_y : Integer

        + <<create>> Player(name : String, colour : Color, x : Integer, y : Integer, objectives : Treasure[6])
        + addObserver(observeur : PlayerObserver)
        + getPosition() : Integer[2]
        + getObjective() : Treasure
        + move(dir : Direction)
        + validateObjective(treasure : Treasure)
        + backHome()
        - isDone() : Boolean
        + toString() : String

        - notifyPosition()
        - notifyFoundTreasure()
        - notifyVictory()
    }

    enum Treasure
    {
        CANNON
        OWL
        POTION
        RING
        CANDLESTICK
        LIZARD
        DAGGER
        BAT
        MOUSE
        TREASURE
        MERMAID
        HOLYGRAIL
        BOMB
        KEYS
        COINS
        CROWN
        BUG
        PONY
        BOOK
        KNIGHTHELMET
        CAT
        DIAMOND
        ARMOR
        BUTTERFLY

        - <<create>> Treasure(nom : String)
        - m_name
        + getNom() : String
        + getRandomTreasureList() : Treasure[24]
    }

    package observers
    {
        interface PlayerObserver
        {
            + {abstract} updatePosition(name : String, x : Integer, y : Integer)
            + {abstract} updateTreasure(name : String, treasure : Treasure, nbTreasureRemaining : Integer)
            + {abstract} updateVictoire(name : String)
        }

        interface BoardObserver
        {
            + {abstract} updateTilesArrangement(dir : Direction, index : Integer, tiles : Tile[7])
        }

        interface GameObserver
        {
            + {abstract} updateTile(tile : Tile)
            + {abstract} updateTurn(turn : Integer)
        }
    }
}

package view
{
    class MainWindow
    {
        + <<create>> MainWindow(ctrl : MainController, game : Game)
    }
}

package controller
{
    class MainController
    {
        + <<create>> MainController(game : Game)
        + startGame()
        + movePLayer(dir : Direction)
        + placeTile(dir : Direction, index : Integer)
        + endTurn()
        + rotateTile()
    }
}

MainWindow ...> GameObserver
MainWindow ...> BoardObserver
MainWindow ...> PlayerObserver

Main ..> Game : <<uses>>
Main ..> MainController : <<uses>>
Main ..> MainWindow : <<uses>>
Player ..> Direction : <<uses>>
Tile ..> Direction : <<uses>>
Tile ..> Player : <<uses>>
TileFactory ..> TileDefault : <<uses>>
TileFactory ..> TileTreasure : <<uses>>
TileFactory ..> TileBase : <<uses>>
TileFactory ..> Direction : <<uses>>
TileFactory ..> Shape : <<uses>>
Board ..> Direction : <<uses>>
Game ..> Direction : <<uses>>
Board ..> TilesGenerationHelper : <<uses>>
TilesGenerationHelper ..> TileFactory : <<uses>>
TilesGenerationHelper ..> Shape : <<uses>>
TilesGenerationHelper ..> Direction : <<uses>>
TilesGenerationHelper ..> Treasure : <<uses>>
MainWindow ..> MainController : <<uses>>
MainWindow ..> Game : <<uses>>

Game "1" *---> "1\n - m_board" Board : is played on
Game "1" *---> "1\n - m_extraTile" Tile : has in stock
Game "1" o---> "1\n - m_currentPlayer" Player : current player
Game "1" o---> "*\n - m_observers" GameObserver : is observed by

Board "1" o---> "49\n - m_tiles" Tile : is made of
Board "1" *---> "4\n - m_players" Player : is played by
Board "1" o---> "*\n - m_observers" BoardObserver : is observed by

TileTreasure "1" *---> "1\n - m_treasure" Treasure : has
TileBase "1" o---> "1\n - m_player" Player : is the start point of

Player "1" *---> "0..6\n - m_objectives" Treasure : has to reach
Player "1" *---> "0..6\n - m_done" Treasure : has reached
Player "1" o---> "*\n - m_observers" PlayerObserver : is observed by

MainController "1" o---> "1\n - m_game" Game : is controlling

@enduml